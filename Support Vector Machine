# Simple code to create an SVM analysis with 2 generated explanatory variables


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SVM
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Finds "best" line (decision boundary) that separates our classes
# Works on what's called "Support Vectors" - The closest points to the separation line... 
# Very useful because the support vectors actually end up being the "most apple-y orange" and the "most orange-y apple"
    # So instead of training on stock, easy cases, it separates right where the confusion begins

# Let's just make a dummy dataset
import random

random.seed(1) # for reproducibility

col1 = random.choices(range(1000), k = 50)
col2 = random.choices(range(1000), k = 50)
coly = random.choices([0,1], k = 50)
# Make the dictionary and pass to dataframe
d = {'x1':col1, 'x2':col2, 'y':coly}
dat = pd.DataFrame(data = d)

# Initiate X and y
X = dat.iloc[:,0:2].values
y = dat.iloc[:,2].values

# Initiate the training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)
print(X_train)
print(X_test)
print(y_train)
print(y_test)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)


# Making the SVM Model
from sklearn import svm
clf = svm.SVC()
svm_model = clf.fit(X_train,y_train)

test_pred = svm_model.predict(X_test)
predict_vs_real = np.concatenate((test_pred.reshape(len(test_pred),1), y_test.reshape(len(y_test),1)),1 )

# Confusion Matrix and Accuracy
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, test_pred)
print(cm)

accuracy = accuracy_score(y_test, test_pred) * 100

print("Accuracy of this {} was: {}%".format("SVM", accuracy))




# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, svm_model.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('SVM Model (Train Set)')
plt.xlabel('X1')
plt.ylabel('Y')
plt.legend()
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, svm_model.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('SVM Model (Test Set)')
plt.xlabel('X1')
plt.ylabel('Y')
plt.legend()
plt.show()
